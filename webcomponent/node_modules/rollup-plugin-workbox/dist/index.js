"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectManifest = exports.generateSW = void 0;
const workbox_build_1 = require("workbox-build");
const prettyBytes = __importStar(require("pretty-bytes"));
const rollup = __importStar(require("rollup"));
const plugin_replace_1 = __importDefault(require("@rollup/plugin-replace"));
const rollup_plugin_terser_1 = require("rollup-plugin-terser");
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const name = 'workbox';
const report = ({ swDest, count, size }) => {
    const prettySize = prettyBytes.default(size);
    console.log(`\nThe service worker file was written to ${swDest}`);
    console.log(`The service worker will precache ${count} URLs, totaling ${prettySize}.\n`);
};
function generateSW(generateSWConfig, render = report) {
    const { swDest, globDirectory } = generateSWConfig;
    if (!swDest)
        throw new Error('No service worker destination specified');
    if (!globDirectory)
        throw new Error('No globDirectory specified');
    const doRender = ({ count, size, }) => render({ swDest, count, size });
    return {
        name,
        writeBundle() {
            return workbox_build_1.generateSW(generateSWConfig).then(doRender).catch(console.error);
        },
    };
}
exports.generateSW = generateSW;
function injectManifest(_a, render = report) {
    var { mode } = _a, injectManifestConfig = __rest(_a, ["mode"]);
    const { swSrc, swDest, globDirectory } = injectManifestConfig;
    if (!swSrc)
        throw new Error('No service worker source specified');
    if (!swDest)
        throw new Error('No service worker destination specified');
    if (!globDirectory)
        throw new Error('No globDirectory specified');
    const doRender = ({ count, size, }) => render({ swDest, count, size });
    return {
        name,
        writeBundle() {
            return workbox_build_1.injectManifest(injectManifestConfig)
                .then(doRender)
                .then(async () => mode === 'production' && (await processBundle({ swDest })))
                .catch(console.error);
        },
    };
}
exports.injectManifest = injectManifest;
/**
 * @TODO
 * This is a hack to be able to support the `mode` property for `injectManifest` until Workbox decides to support it.
 * Feature is tracked here: https://github.com/GoogleChrome/workbox/issues/2588
 * Once Workbox's `injectManifest` supports this out of the box, we should remove this.
 */
const processBundle = async ({ swDest }) => {
    const bundle = await rollup.rollup({
        input: swDest,
        plugins: [
            plugin_replace_1.default({ 'process.env.NODE_ENV': '"production"' }),
            plugin_node_resolve_1.default(),
            rollup_plugin_terser_1.terser({ output: { comments: false } }),
        ],
    });
    await bundle.write({
        file: swDest,
        format: 'iife',
    });
};
//# sourceMappingURL=index.js.map