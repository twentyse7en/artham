"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeCustomElement = exports.isCustomElement = exports.isCustomElementDecorator = void 0;
const customElementsCache = new WeakMap();
/**
 * Determines if a given decorator is the `@customElement` decorator
 *
 * @param {DecoratorNode} node Decorator to test
 * @return {boolean}
 */
function isCustomElementDecorator(node) {
    return ((node.expression.type === 'CallExpression' &&
        node.expression.callee.type === 'Identifier' &&
        node.expression.callee.name === 'customElement') ||
        (node.expression.type === 'Identifier' &&
            node.expression.name === 'customElement'));
}
exports.isCustomElementDecorator = isCustomElementDecorator;
/**
 * Determines if a node is an element class or not.
 *
 * @param {Rule.RuleContext} context ESLint rule context
 * @param {ESTree.Class} node Node to test
 * @param {AST.Token=} jsdoc JSDoc to parse
 * @return {boolean}
 */
function isCustomElement(context, node, jsdoc) {
    var _a, _b, _c;
    const asDecorated = node;
    const customElementBases = ['HTMLElement'];
    const cached = customElementsCache.get(node);
    if (cached !== undefined) {
        return cached;
    }
    if (Array.isArray((_a = context.settings.wc) === null || _a === void 0 ? void 0 : _a.elementBaseClasses)) {
        customElementBases.push(...context.settings.wc.elementBaseClasses);
    }
    if (((_b = node.superClass) === null || _b === void 0 ? void 0 : _b.type) === 'Identifier' &&
        customElementBases.includes(node.superClass.name)) {
        customElementsCache.set(node, true);
        return true;
    }
    if (jsdoc === null || jsdoc === void 0 ? void 0 : jsdoc.value.includes('@customElement')) {
        customElementsCache.set(node, true);
        return true;
    }
    if ((_c = asDecorated.decorators) === null || _c === void 0 ? void 0 : _c.some(isCustomElementDecorator)) {
        customElementsCache.set(node, true);
        return true;
    }
    customElementsCache.set(node, false);
    return false;
}
exports.isCustomElement = isCustomElement;
/**
 * Determines if a node is an extension of HTMLElement class or not.
 *
 * @param {ESTree.Class} node Node to test
 * @return {boolean}
 */
function isNativeCustomElement(node) {
    var _a;
    return (((_a = node.superClass) === null || _a === void 0 ? void 0 : _a.type) === 'Identifier' &&
        node.superClass.name === 'HTMLElement');
}
exports.isNativeCustomElement = isNativeCustomElement;
