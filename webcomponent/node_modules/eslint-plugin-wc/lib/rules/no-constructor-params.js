"use strict";
/**
 * @fileoverview Disallows constructor parameters in custom elements
 * @author James Garbutt <https://github.com/43081j>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows constructor parameters in custom elements',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/no-constructor-params.md'
        },
        messages: {
            noParams: 'Constructors must not have parameters as they are called with ' +
                'no parameters when custom elements are created by the browser.'
        }
    },
    create(context) {
        const constructorQuery = 'ClassBody > MethodDefinition[kind="constructor"]' +
            '[value.params.length > 0]';
        let insideElement = false;
        const source = context.getSourceCode();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        const visitConstructor = (node) => {
            if (insideElement) {
                context.report({
                    node,
                    messageId: 'noParams'
                });
            }
        };
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            [`ClassExpression > ${constructorQuery}`]: visitConstructor,
            [`ClassDeclaration > ${constructorQuery}`]: visitConstructor,
            'ClassDeclaration,ClassExpression': (node) => {
                if (util_1.isCustomElement(context, node, source.getJSDocComment(node))) {
                    insideElement = true;
                }
            },
            'ClassDeclaration,ClassExpression:exit': () => {
                insideElement = false;
            }
        };
    }
};
exports.default = rule;
